# Used to test new features

GAME {
    win_con = greatest players score;
    end_con = [any players isEmpty hand, any players isEqual score 10];
    turn_order = right;
}


CARD {
    card_suits = [Hearts, Diamonds, Clubs, Spades];
    card_values =
        [1, 2, 3, 4, 5, 6,
        7, 8, 9, 10, 11, 12, 13];
    card_ranks = [Ace, Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King];
    card_constraints = ranks;
    exception_constraints eq = ranks;
    ignore_constraints = [Hearts.Ace];
    card_compare = gte;
    
    # Define some card effects
    change_card suits = [Hearts.Ace];
    swap_hand = [Diamonds.Ace, Spades.Ace];
    take_from_hand = [Clubs.Ace];
    give_card = Hearts.Two;
    pass_next = [Hearts.King];
    draw_card 2 = [Hearts.Queen, Spades.Queen];
}

# Player stats
PLAYER {
player_hand = 4;
player_moves = [PLAY_CARD FALSE, DRAW_CARD TRUE, DRAW_CARD TRUE, DRAW_CARD TRUE, PASS FALSE, DISCARD_CARD FALSE];
}


# Define the game actions
ACTIONS {
    any_time = [isEmpty deck : [swap pile deck, shuffle deck, take 1 deck pile], isEmpty pile : take 1 deck pile];
    start_time = [always : shuffle deck, isEmpty pile : take 1 deck pile, always : reset player moves];
    turn_end = [always : reset player moves, prevPlayer isMove pPass : [goBack turn, put pile player hand, goForward turn]];
}